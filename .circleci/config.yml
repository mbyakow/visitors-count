version: 2
jobs:
  build:
    docker:
      - image: circleci/node:8

    working_directory: ~/repo

    steps:
      - checkout

      - restore_cache:
          key: v1-dependencies-{{ checksum "package.json" }}

      - run:
          name: Install node packages
          command: npm install

      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}
  deploy:
    docker:
      - image: google/cloud-sdk
    environment:
      - PROJECT_NAME: "visits-counter"
      - GOOGLE_PROJECT_ID: "visitors-counter-224219"
      - GOOGLE_COMPUTE_ZONE: "europe-west1-b"
      - GOOGLE_CLUSTER_NAME: "standard-cluster-1"
    steps:
          - checkout
          - run:
              name: Setup Google Cloud SDK
              command: |
                apt-get install -qq -y gettext
                echo $GCLOUD_SERVICE_KEY > ${HOME}/gcloud-service-key.json
                gcloud auth activate-service-account --key-file=${HOME}/gcloud-service-key.json
                gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
                gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
                gcloud --quiet container clusters get-credentials ${GOOGLE_CLUSTER_NAME}
          - setup_remote_docker
          - run:
              name: Docker build and push
              command: |
                docker build \
                  --build-arg COMMIT_REF=${CIRCLE_SHA1} \
                  --build-arg BUILD_DATE=`date -u +”%Y-%m-%dT%H:%M:%SZ”` \
                  --no-cache \
                  -t ${PROJECT_NAME} .
                docker tag ${PROJECT_NAME} eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
                gcloud auth print-access-token | docker login -u oauth2accesstoken --password-stdin https://eu.gcr.io
                docker push eu.gcr.io/${GOOGLE_PROJECT_ID}/${PROJECT_NAME}:${CIRCLE_SHA1}
          - run:
              name: Deploy to Kubernetes
              command: |
                envsubst < ${HOME}/project/k8s.yml > ${HOME}/patched_k8s.yml
                kubectl apply -f ${HOME}/patched_k8s.yml
                kubectl rollout status deployment/${PROJECT_NAME}
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only: master